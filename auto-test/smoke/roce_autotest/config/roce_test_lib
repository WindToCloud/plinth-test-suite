#!/bin/bash
#
ROCE_LIB_TOP_DIR=$( cd "`dirname $0`" ; pwd )
#ROCE_CASE_DIR=${ROCE_TOP_DIR}/case_script
. ${ROCE_LIB_TOP_DIR}/config/roce_test_config
ROCE_DRV=${ROCE_LIB_TOP_DIR}/config/package

# ----start------->chenjing
#######################
function init_local_fibre_or_tp() {
    for i in ${hns_total[*]}
    do
        tmp_network=$(cat /sys/class/infiniband/${i}/ports/1/gid_attrs/ndevs/0)
        ethtool ${tmp_network} | grep "TP" && local_tp=${tmp_network} || local_fibre=${tmp_network}
    done
}

function clear_send_read_write_envir() {
    local sum=("write" "read" "send")
    for i in ${sum[*]}
    do
        search=$(ps -aux | grep ib_${i}_bw | grep "hns")
        if [ $? -eq 0 ]
        then
            pid=$(echo ${search} | awk '{print $2}')
            kill -9 ${pid}
        fi
    done
}

function check_roce_drv() {
    #check if roce driver is exist or not
    if [ -d "/sys/class/infiniband" ];then
        if [ "`ls -A "/sys/class/infiniband"`" = "" ]; then
            echo "The roce drivers is not exist!return !"
            return 1
        else
            echo "Found the roce drivers!"
        fi
    else
        echo "The roce driver is not exist! return!"
        return 1
    fi

    tmp=`echo ${ROCE_USERDRV_GITADDR} | awk -F'.' '{print $2}' | awk -F'/' '{print $NF}'`
    echo "The name of kernel repo is "$tmp
    #checkout if roce user driver repo is exit or not!
    #if [ ! -d "/root/chenjing/${tmp}" ];then
    if [ "${BUILD_USER_DRV}"x = "FALSE"x ]
    then
        download_roce_drv
    else
        build_roce_drv
    fi

    return 0
    #else
    #    echo "The kernel repo have been found!"
    #fi
}

function download_roce_drv() {
    cd /home/
    if [ ! -d "/home/roce_userDrv" ]
    then
        git clone https://github.com/Luojiaxing1991/roce_userDrv.git
    fi
    if [ ! -d "/home/roce_userDrv/${USER_DRV_VERSION}" ]
    then
        echo " This version is not exists"
        exit 1
    fi
    cd /home/roce_userDrv/${USER_DRV_VERSION}
    git pull
    tmp=$(ls -a | grep "${ROCE_BOARD_TYPE}")
    [ "${tmp}"x != ""x ] && tar -zxf ${tmp} || exit 1
    tmp=$(echo ${tmp} | awk -F "." '{print $1}')
    echo ${tmp}
    cd /home/roce_userDrv/${USER_DRV_VERSION}/plinth-roce/build/lib
    apt-get install perftest -y
    wait
    apt-get install libnl-route-3-dev -y
    wait
    cp -a libhns-rdmav* /lib
    cp -a libibverbs.so* /lib
    cp -a libibumad.so* /lib
    cp -a librdmacm.so* /lib
    cp -a libhns-rdmav* /usr/lib
    cp -a libibverbs.so* /usr/lib
    cp -a libibumad.so* /usr/lib/aarch64-linux-gnu
    cp -a librdmacm.so* /usr/lib/aarch64-linux-gnu

    echo "Finish copy the roce user driver to /lib/"

    file="libibverbs.d"
    hns_tal="driver hns"
    if [ ! -d "/etc/${file}" ];then
        mkdir /etc/${file}
        touch /etc/${file}/hns.driver
        echo ${hns_tal} > /etc/${file}/hns.driver
    else
        find /etc/${file} -name hns.driver
        if [ $? -ne 0 ]
        then
            touch /etc/${file}/hns.driver
            echo ${hns_tal} > /etc/${file}/hns.driver
        fi
    fi
    mkdir -p /root/chenjing/plinth-roce/build/etc/libibverbs.d
    cp /etc/libibverbs.d/hns.driver /root/chenjing/plinth-roce/build/etc/libibverbs.d
    echo "Finish to configure roce user driver"


}

function build_roce_drv() {
    mkdir -p /root/chenjing; cd /root/chenjing
    if [ ! -d "/root/chenjing/${tmp}" ];then
        expect -c '
            set timeout -1
            set gitaddr "https://github.com/hisilicon/plinth-roce.git"
            spawn git clone ${gitaddr}
            expect {
                "Username" { send "Luojiaxing1991\r";exp_continue }
                "Password" { send "ljxfyjh1321\r";exp_continue}
                   }
        '
    fi

   # get the git repo name
   # name=echo ${ROCE_USERDRV_GITADDR##*/}
   # echo $name
   # name=`echo $name | awk -F'.' '{print $1}'`
   # echo $name
   # pushd $name
   # tmp_url=`cat .git/config | grep 'github.com/'`
   # if [ x"${tmp_url}" == x"${ROCE_USERDRV_GITADDR}" ];then
       # sed -i 's/github.com/Luojiaxing1991:ljxfyjh1321@github.com/g' .git/config
   # fi
    cd /root/chenjing/${tmp}
    # cd ${ROCE_DRV}
    # tar -zxvf plinth-roce.tar.gz
    # cd ${ROCE_DRV}/plinth-roce

    #checkout specified branch and build keinel
    git branch -a | grep ${ROCE_USERDRV_BRANCH}

    if [ $? -eq 0 ];then
       #The same name of branch is exit
        git checkout -b roce_drv origin/${ROCE_USERDRV_BRANCH}
    else
        Error="The branch is not found"
        exit 1
    fi
   # expect -c '
#		    set timeout -1
 #                   spawn git pull
#		    expect {
#			    "Username" { send "Luojiaxing1991\r";exp_continue }
#			    "Password" { send "ljxfyjh1321\r";exp_continue}
#			       }
#		'

    #git pull

    echo "Begin to build the roce user driver!"
    command_list=("build-essential" "cmake" "gcc" "libnl-3-dev" "libnl-route-3-dev" "ninja-build" "pkg-config" "valgrind" "perftest")
    wait
    for i in ${command_list[*]}
    do
        which ${i}
        [ $? -ne 0 ] && apt-get install ${i} -y; wait || echo "command exist" ${i}
    done

    bash build.sh

    echo "Finish the roce user driver build!"
    #cp the so to /lib document
    cd build/lib/

    # cd ${ROCE_DRV}
    # tar -zxvf plinth-roce.tar.gz
    # cd ${ROCE_DRV}/${tmp}/build/lib
    # sudo apt-get update
    # which ib_send_bw
    # [ $? -ne 0 ] && sudo apt-get install perftest -y; wait
    # apt-get install libnl-route-3-dev
    cp -a libhns-rdmav* /lib
    cp -a libibverbs.so* /lib
    cp -a libibumad.so* /lib
    cp -a librdmacm.so* /lib
    cp -a libhns-rdmav* /usr/lib
    cp -a libibverbs.so* /usr/lib
    cp -a libibumad.so* /usr/lib/aarch64-linux-gnu
    cp -a librdmacm.so* /usr/lib/aarch64-linux-gnu

    echo "Finish copy the roce user driver to /lib/"

    file="libibverbs.d"
    hns_tal="driver hns"
    if [ ! -d "/etc/${file}" ];then
        mkdir /etc/${file}
        touch /etc/${file}/hns.driver
        echo ${hns_tal} > /etc/${file}/hns.driver
    else
        find /etc/${file} -name hns.driver
        if [ $? -ne 0 ]
        then
            touch /etc/${file}/hns.driver
            echo ${hns_tal} > /etc/${file}/hns.driver
        fi
    fi
    # mkdir -p /root/chenjing/plinth-roce/build/etc/libibverbs.d
    # cp /etc/libibverbs.d/hns.driver /root/chenjing/plinth-roce/build/etc/libibverbs.d
    echo "Finish to configure roce user driver"
}

#----------end---------------
#################################################3

function init_net_export()
{
    echo "Begin to check eth rename info!"

    #we update the eth rename info to eth_map,then update TP/FIBRE info
    tmp_tp=0
    tmp_fi=0
    for i in ${!eth_map[*]}
    do
         tmp=`dmesg | grep -i "renamed from "${i} -w`
	 if [ x"${tmp}" == x"" ]
	 then
		 echo "The name of "${i}" is not renamed,Stay as "${eth_map[${i}]}
	 else
	         tmp=`echo ${tmp%:*}`
	         tmp=`echo ${tmp##* }`
	         eth_map[${i}]=${tmp}
	         echo "The name of "${i}" is renamed as "${eth_map[${i}]}
	 fi
    done
}
#get the eth0's ip in server and client
#IN	: NA
#OUT: NA
function Init_Net_Ip()
{
	#get the ip of server
	LOCAL_IP=`ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F':' '{print $2}'`
	echo "The server's ip is ${LOCAL_IP}"

	#get the ip of slave board
	for tmpip in "${!ip_map[@]}"
	do
		if [ "$tmpip"x = "$LOCAL_IP"x ];then
			BACK_IP=${ip_map[$tmpip]}
			break
		fi
	done
	echo "The slave ip is ${BACK_IP}"

        init_net_export
}

# set ip for testing
# IN : NA
# OUT: NA
function Set_Test_Ip()
{
	#set local ip for testing
	ifconfig $LOCAL_ETHX ${local_port_ip[$ROCE_PORT]}

	#get the net's port according the roce's port
	REMOTE_ETHX=`ssh root@${BACK_IP} "cat /sys/class/infiniband/hns_0/ports/${ROCE_PORT}/gid_attrs/ndevs/0" `

        echo "The name of local_ethx is "${LOCAL_ETHX}
        echo "The name of remote_ethx is "${REMOTE_ETHX}

	#set remote ip for testing
	ssh root@${BACK_IP} "ifconfig ${LOCAL_ETHX} ${remote_port_ip[$ROCE_PORT]}"

	#check the network is ok
	ping ${remote_port_ip[$ROCE_PORT]} -c 6 > /dev/null
	[ $? != 0 ] && echo "The network isn't working between local $LOCAL_ETHX and remote $REMOTE_ETHX, please check!" && exit 1
}

# Establish a relationship of mutual trust between two boards
# IN : $1 The IP of eth0 in the board as client.
# OUT: N/A
function TrustRelation()
{
	which expect
	[ $? != 0 ] && apt-get install -y expect 1>/dev/null
	rm -f ~/.ssh/*
	ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
	#/usr/bin/expect << -EOF			#嵌套expect
	expect -c '
		set timeout -1
		set eth0ip '$1'
		spawn ssh-copy-id root@${eth0ip}
		expect {
			"(yes/no)" { send "yes\r";exp_continue }
			"*password:" { send "root\r"}
			}
		expect -re ":.*#"
		'
	#EOF						#嵌套结束
	return 0
}

function copy_tool_so()
{
	if [ ! -d /lib64 ]
	then
		ln -s /lib /lib64
	fi

	ssh root@${BACK_IP} " if [ ! -d /lib64 ]; then ln -s /lib /lib64; fi;\
						  if [ ! -d ${CASEPATH} ]; then mkdir ${CASEPATH}; fi "
	wait

	pushd ${ROCE_CASE_DIR}

	pushd so
	#cp -a * /lib/

	#rsync -l * root@${BACK_IP}:/lib/
        #需要对libibver.so.1重新软连接
	popd

#	scp ${ROCE_TOP_DIR}/case_script/4120/roce_test_main root@${BACK_IP}:${CASEPATH}/roce-test
        scp roce-client root@${BACK_IP}:${CASEPATH}/

	pushd test

	#modify the ib_port and servername according to the user's configuration
	sed -i "/ib_port/s/^[0-9.]\+\([ \t]\+\)/${ROCE_PORT}\1/" *
	sed -i "/servername/s/^[0-9.]\+\([ \t]\+\)/${local_port_ip[$ROCE_PORT]}\1/" *

	scp * root@${BACK_IP}:${CASEPATH}/
	popd

	pushd perftest
	scp * root@${BACK_IP}:${CASEPATH}/
	popd

	popd

	#config for the roce's kernel driver
	if [ ! -d /usr/local/etc/libibverbs.d ]
	then
		mkdir -p /usr/local/etc/libibverbs.d
		echo "driver hns" > /usr/local/etc/libibverbs.d/hns.driver
	fi

    ssh root@${BACK_IP} " if [ ! -d /usr/local/etc/libibverbs.d ]; \
	then \
		mkdir -p /usr/local/etc/libibverbs.d; \
		echo "driver hns" > /usr/local/etc/libibverbs.d/hns.driver; \
	fi; "
    wait

	return 0

}
#  call the implementation of the automation use cases
#  IN : N/A
#  OUT: N/A
function test_case_function_run()
{
	if [ x"${TEST_CASE_FUNCTION_SWITCH}" == x"on" ]
	then
		${TEST_CASE_FUNCTION_NAME}
		if [ x"${MESSAGE}" == x"PASS"  ];then
          		lava_report "${TEST_CASE_TITLE}" pass "${Developer}" "${MESSAGE}"
                test_report "${TEST_CASE_TITLE}" pass "${MESSAGE}" "${Developer}" "${Tester}" "${DateTime}"
		else
			if [ x"${MESSAGE}" = x"" ];then
				MESSAGE="Roce fail for unknow error!"
			fi
			lava_report "${TEST_CASE_TITLE}" fail "${Developer}" "${MESSAGE}"
            test_report "${TEST_CASE_TITLE}" fail "${MESSAGE}" "${Developer}" "${Tester}" "${DateTime}"
		fi
	else
		MESSAGE="BLOCK\tno automated use cases were implemented."
	fi
	#writePass "ROCE" "${TEST_CASE_TITLE"
}

# Output log file header
# IN : N/A
# OUT: N/A
function writeLogHeader
{
	echo -e "Designed Requirement ID\tTest Case ID\tTest Item\tTest Case Title\tAutomated scripts\tRealize the function\tSwitch\tResult\tReason" > ${ROCE_TOP_DIR}/${OUTPUT_TEST_DB_FILE}
	return 0
}
