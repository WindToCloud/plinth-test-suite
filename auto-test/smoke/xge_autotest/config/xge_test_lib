#!/bin/bash
#
## Utility function
# . ${HNS_TOP_DIR}/../config/common_lib
common_tool="${HNS_TOP_DIR}/../common_tool"

declare -A eth_map
eth_map=(
["eth0"]="enp125s0f0"
["eth1"]="enp125s0f1"
["eth2"]="enp125s0f2"
["eth3"]="eth3"
)

declare -A eth_map_r
eth_map_r=(
["eth0"]="enp125s0f0"
["eth1"]="enp125s0f1"
["eth2"]="enp125s0f2"
["eth3"]="eth3"
)

###### start with chenjing <-------------------

function install_iperf_netperf() {
    command=("iperf" "netperf")
    for i in ${command[*]}
    do
        local_command=$(which ${i})
        remote_command=$(ssh -o StrictHostKeyChecking=no root@${BACK_IP} "which ${i}")
        if [ x"${local_command}" == x"" ];then
		 apt-get install ${i} -y
	 fi
	 if [ x"${remote_command}" = x"" ];then
     		 #wait
            ssh -o StrictHostKeyChecking=no root@${BACK_IP} "apt-get update; apt-get install ${i} -y; wait"
        fi
    done

}

function qperf_install() {
    which qperf
    [ $? -ne 0 ] || echo "begin to install qperf"; cp ${common_tool}/qperf /usr/bin
   # ssh -o StrictHostKeyChecking=no root@${BACK_IP} "which qperf"
   # [ $? -ne 0 ] || echo "begin to install remote qperf";
   scp ${common_tool}/qperf root@${BACK_IP}:/usr/bin
}

#####> end with chenjing <--------------------

function test_case_switch()
{
    if [ x"${TEST_CASE_FUNCTION_SWITCH}" == x"on" ]
    then
        ${TEST_CASE_FUNCTION_NAME}
        if [ x"${MESSAGE}" == x"PASS" ];then
          lava_report "${TEST_CASE_TITLE}" pass "${Developer}" "${MESSAGE}"
          test_report "${TEST_CASE_TITLE}" pass "${MESSAGE}" "${Developer}" "${Tester}" "${DateTime}"
        else
          lava_report "${TEST_CASE_TITLE}" fail "${Developer}" "${MESSAGE}"
          test_report "${TEST_CASE_TITLE}" fail "${MESSAGE}" "${Developer}" "${Tester}" "${DateTime}"
	fi

    else
        MESSAGE="BLOCK\tno automated use cases were implemented."
    fi
}

## Utility function
function init_net_ip()
{
    echo "Begin to check net ip"
    LOCAL_IP=`ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F':' '{print $2}'`
    echo "The local ip of eth0 is "${LOCAL_IP}
    for tmpip in "${!initial_ip[@]}"
    do
        if [ "$tmpip"x = "$LOCAL_IP"x ];then
            BACK_IP=${initial_ip[$tmpip]}
            echo "The slave ip is "$BACK_IP
        fi
    done
}

function init_net_export()
{
    declare -a local_tp_list
    declare -a local_fibre_list
    declare -a remote_tp_list
    declare -a remote_fibre_list
    #local_netport_list=`ifconfig -a | grep 'eth' | awk '{print $1}'`
    #for i in $local_netport_list
    #do
    #    ethtool $i | grep "TP"
    #    if [ $? = 0 ];then
    #        local_tp_list=(${local_tp_list[*]} $i)
    #    else
    #        local_fibre_list=(${local_fibre_list[*]} $i)
    #    fi
    #done
    echo "Begin to check eth rename info!"


    #we update the eth rename info to eth_map,then update TP/FIBRE info
    tmp_tp=0
    tmp_fi=0
    for i in ${!eth_map[*]}
    do
         tmp=`dmesg | grep -i "renamed from "${i} -w`
	 if [ x"${tmp}" == x"" ]
	 then
		 echo "The name of "${i}" is not renamed,Stay as "${eth_map[${i}]}
	 else
	         tmp=`echo ${tmp%:*}`
	         tmp=`echo ${tmp##* }`
	         eth_map[${i}]=${tmp}
	         echo "The name of "${i}" is renamed as "${eth_map[${i}]}
	 fi

    a=$[RANDOM%201]
    main_eth="eth3"
    # if [ x"${eth_map[${main_eth}]}" = x"${eth_map[${i}]}" ]
    if [ x"${main_eth}" = x"${eth_map[${i}]}" ]
    then
        echo "this eth is not change!"
    else
        ifconfig ${eth_map[${i}]} "192.168.${a}.209"
        # ifconfig enp125s0f0 "192.168.${a}.209"
        echo 'y'
    fi

	 #we update the TP/FIBRE info intolocal_tp/fibre_list
         if [ x"${eth_map[${i}]}" = x"${g_ctrlNIC}" ];then
             continue
         fi


         ethtool ${eth_map[${i}]} | grep "TP"
         if [ $? = 0 ];then
            local_tp_list=(${local_tp_list[*]} ${eth_map[${i}]})
         else
            local_fibre_list=(${local_fibre_list[*]} ${eth_map[${i}]})
         fi
    done
    echo "----------------------------------------------------<"
    echo ${local_fibre_list[*]}
    echo ${local_tp_list[*]}

    #get the pcie kard nic into list

    #get the pcie kard nic into list

    tmplen=${#local_tp_list[@]}
    echo "len of local_tp_list is $tmplen"

    if [ $tmplen -gt 1 ];then
        echo "Enough nic for ge test!"
    else
        echo "Add a ge nic form pcie card !"
        tmplist=`ifconfig -a | grep "Link encap:Ethernet" | awk -F' ' '{print $1}'`
        for nic in $tmplist
        do
            echo "NIC is $nic"
            ethtool $nic | grep "TP"
            if [ $? -eq 0 ];then
               ifconfig $nic | grep 192
               if [ $? -eq 0 ];then
                   continue
               else
                   local_tp_list=(${local_tp_list[*]} $nic)
                   tmplen=${#local_tp_list[@]}
                   if [ $tmplen -gt 1 ];then
                       #echo "Get enough tp nic!break..."
                       break
                   fi
               fi
            fi
        done
        tmplen=${#local_tp_list[@]}
                   if [ $tmplen -gt 1 ];then
                       echo "Get enough tp nic!break..."
                   else
                       echo "<---------------------->"
                       echo -e "\033\31m NIC for GE TEST is not enough,need two ge nic. please check environment and cfg!....\0m"
                   fi

    fi

    tmplen=${#local_fibre_list[@]}
    echo "len of local_fibre_list is $tmplen"

    if [ $tmplen -gt 1 ];then
        echo "Enough nic for xge test!"
    else
        echo "Add a xge nic form pcie card !"
        tmplist=`ifconfig -a | grep "Link encap:Ethernet" | awk -F' ' '{print $1}'`
        for nic in $tmplist
        do
            echo "NIC is $nic"
            ethtool $nic | grep "FIBRE"
            if [ $? -eq 0 ];then
               ifconfig $nic | grep 192
               if [ $? -eq 0 ];then
                   continue
               else
                   local_fibre_list=(${local_fibre_list[*]} $nic)
                   tmplen=${#local_fibre_list[@]}
                   if [ $tmplen -gt 1 ];then
                       #echo "Get enough tp nic!break..."
                       break
                   fi
               fi
            fi
        done
        tmplen=${#local_fibre_list[@]}
                   if [ $tmplen -gt 1 ];then
                       echo "Get enough xge nic!break..."
                   else
                       echo "<---------------------->"
                       echo -e "\033\31m NIC for XGE TEST is not enough,need two ge nic. please check environment and cfg!....\0m"
                   fi

    fi


    local_tp1=${local_tp_list[0]}
    echo "The First TP port is "${local_tp1}
    local_tp2=${local_tp_list[1]}

    local_tp0=${local_tp_list[0]}
    echo "The second TP port is "${local_tp2}

    local_fibre1=${local_fibre_list[1]}
    echo "The First FIBRE port is "${local_fibre1}
    local_fibre2=${local_fibre_list[0]}
    echo "The second FIBRE port is"${local_fibre2}

    #remote_netport_list=$(ssh -o StrictHostKeyChecking=no root@192.168.1.181 ifconfig -a | grep 'eth' | awk '{print $1}')
    #for i in $remote_netport_list
    #do
    #    ssh -o StrictHostKeyChecking=no root@192.168.1.181 "ethtool $i | grep 'TP'"
    #    if [ $? = 0 ];then
    #        remote_tp_list=(${remote_tp_list[*]} $i)
    #    else
    #        remote_fibre_list=(${remote_fibre_list[*]} $i)
    #    fi
    #done

    #we update the eth rename info to eth_map,then update TP/FIBRE info
    tmp_tp=0
    tmp_fi=0
    for i in ${!eth_map_r[*]}
    do
         tmp=`ssh -o StrictHostKeyChecking=no root@${BACK_IP} 'dmesg | grep -i "renamed from '${i}'" -w'`
	 if [ x"${tmp}" = x"" ]
	 then
		 echo "The name of remote "${i}" is not renamed,Stay as "${eth_map_r[${i}]}
	 else
	         tmp=`echo ${tmp%:*}`
	         tmp=`echo ${tmp##* }`
	         eth_map_r[${i}]=${tmp}
	         echo "The name of remote "${i}" is renamed as "${eth_map_r[${i}]}
	 fi

    if [ x"${eth_map_r[${main_eth}]}" = x"${eth_map_r[${i}]}" ]
    then
        echo "this eth is not change!"
    else
        ssh -o StrictHostKeyChecking=no root@${BACK_IP} "ifconfig ${eth_map_r[${i}]} '192.168.${a}.219'"
        echo 'N'
    fi

	 #we update the TP/FIBRE info intolocal_tp/fibre_list
         if [ x"${eth_map_r[${i}]}" = x"${g_ctrlNIC}" ];then
             continue
         fi


         tmp=`ssh -o StrictHostKeyChecking=no root@${BACK_IP} 'ethtool '${eth_map_r[${i}]}' | grep "TP"'`
         if [ "${tmp}"x = ""x ];then
            remote_fibre_list=(${remote_fibre_list[*]} ${eth_map_r[${i}]})
         else
            remote_tp_list=(${remote_tp_list[*]} ${eth_map_r[${i}]})
         fi
    done

    tmplen=${#remote_tp_list[@]}
    echo "len of remote_tp_list is $tmplen"

    if [ $tmplen -gt 1 ];then
        echo "Enough nic for remote ge test!"
    else
        echo "Add a remote ge nic form pcie card !"
        tmplist=`ssh -o StrictHostKeyChecking=no root@${BACK_IP} ifconfig -a | grep 'Link encap:Ethernet' | awk '{print \$1}'`
        #tmplist=`echo $tmplist | grep 'Link encap' | awk -F' ' '{print $1}'`
        for nic in $tmplist
        do
            echo "remote NIC is $nic"
            ssh -o StrictHostKeyChecking=no root@${BACK_IP} "ethtool $nic | grep 'TP'"
            if [ $? -eq 0 ];then
               ssh -o StrictHostKeyChecking=no root@${BACK_IP} "ifconfig $nic | grep 192"
               if [ $? -eq 0 ];then
                   continue
               else
                   remote_tp_list=(${remote_tp_list[*]} $nic)
                   tmplen=${#remote_tp_list[@]}
                   if [ $tmplen -gt 1 ];then
                       #echo "Get enough tp nic!break..."
                       break
                   fi
               fi
            fi
        done
        tmplen=${#remote_tp_list[@]}
                   if [ $tmplen -gt 1 ];then
                       echo "Get enough remote ge nic!break..."
                   else
                       echo "<---------------------->"
                       echo -e "\033\31m NIC for GE TEST is not enough,need two remote ge nic. please check environment and cfg!....\0m"
                   fi

    fi

    tmplen=${#remote_fibre_list[@]}
    echo "len of remote_fibre_list is $tmplen"

    if [ $tmplen -gt 1 ];then
        echo "Enough nic for remote xge test!"
    else
        echo "Add a remote xge nic form pcie card !"
        tmplist=`ssh -o StrictHostKeyChecking=no root@${BACK_IP}  ifconfig -a | grep 'Link encap:Ethernet' | awk '{print \$1}'`
#        tmplist=`echo $tmplist | awk -F' ' '{print $1}'`
        for nic in $tmplist
        do
            echo "NIC is $nic"
            ssh -o StrictHostKeyChecking=no root@${BACK_IP} "ethtool $nic | grep 'FIBRE'"
            if [ $? -eq 0 ];then
               ssh -o StrictHostKeyChecking=no root@${BACK_IP} "ifconfig $nic | grep 192"
               if [ $? -eq 0 ];then
                   continue
               else
                   remote_fibre_list=(${remote_fibre_list[*]} $nic)
                   tmplen=${#remote_fibre_list[@]}
                   if [ $tmplen -gt 1 ];then
                       #echo "Get enough tp nic!break..."
                       break
                   fi
               fi
            fi
        done
        tmplen=${#remote_fibre_list[@]}
                   if [ $tmplen -gt 1 ];then
                       echo "Get enough remote xge nic!break..."
                   else
                       echo "<---------------------->"
                       echo -e "\033\31m NIC for remote XGE TEST is not enough,need two ge nic. please check environment and cfg!....\0m"
                   fi

    fi


    remote_tp1=${remote_tp_list[0]}
    remote_tp0=${g_ctrlNIC}
    remote_tp2=${remote_tp_list[1]}

    echo "The remote Tp port is as blow: "
    echo "The remote netport 0 is "${remote_tp1}
    echo "The remote netport 1 is "${remote_tp2}

    remote_fibre1=${remote_fibre_list[1]}
    remote_fibre2=${remote_fibre_list[0]}

    echo "The rempte FIBRE port is as blow:"
    echo ${remote_fibre1}
    echo ${remote_fibre2}

    echo $remote_tp1 $remote_tp2 $remote_fibre1 $remote_fibre2
    #echo $local_tp_list $local_fibre_list $remote_tp_list $remote_fibre_list
}

function setTrustRelation()
{
    echo "Begin to Set Trust Relation!"
    rm -f ~/.ssh/*

    expect -c '
        set timeout -1
        set back_ip '${BACK_IP}'
        spawn ssh-keygen -t rsa
        expect {
        "*save the key*id_rsa*" { send "\r"; exp_continue }
        "*verwrite*y/n*" { send "y\r"; exp_continue }
        "*passphrase*passphrase*" { send "\r"; exp_continue }
        "*same passphrase*" { send "\r" }
        }
        expect eof

        sleep 1

        spawn ssh-copy-id -i root@${back_ip}
        expect "Are you sure you want to continue connecting (yes/no)?"
        send "yes\r"
        sleep 10
        expect -re ".*password:"
        send "root\r"

        expect eof
        exit 0
    '

    return 0
}

function determine_iperf_exists()
{
    local_iperf_tools=$(which iperf)
    remote_iperf_tool=$(ssh -o StrictHostKeyChecking=no root@${BACK_IP} "which iperf")
    if [ x"$local_iperf_tools" == x"" -o x"$remote_iperf_tool" == x"" ];then
        return 1
    fi
}

function perf_init()
{
    Ipv6Single=0
    Ipv6Dual=0
    Ipv4Single=0
    Ipv4Dual=0
    NetperfSingle=0
    NetperfDual=0
    QperfTest=0
    VlanSingle=0
    VlanDual=0
    killall iperf netperf qperf
    ssh -o StrictHostKeyChecking=no root@$BACK_IP killall iperf netperf qperf

    return 0
}
